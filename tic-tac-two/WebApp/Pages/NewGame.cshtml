@page
@using GameBrain
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApp.Pages.NewGame

<h1>New Game</h1>

<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Configuration Name -->
            <div class="form-group">
                <label asp-for="ConfigName" class="control-label"></label>
                <select asp-for="ConfigName" class="form-select" asp-items="Model.ConfigSelectList"></select>
            </div>

            <!-- Game Setting Options -->
            <div class="form-check">
                <input class="form-check-input" type="radio" name="SelectedGameSetting" id="PvP" value="PvP"
                       @(Model.SelectedGameSetting == EGamePlayers.PvP ? "checked" : "") />
                <label class="form-check-label" for="PvP">Player vs Player</label>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="radio" name="SelectedGameSetting" id="PvA" value="PvA"
                       @(Model.SelectedGameSetting == EGamePlayers.PvA ? "checked" : "") />
                <label class="form-check-label" for="PvA">Player vs AI</label>
            </div>

            <div class="form-check">
                <input class="form-check-input" type="radio" name="SelectedGameSetting" id="AvA" value="AvA"
                       @(Model.SelectedGameSetting == EGamePlayers.AvA ? "checked" : "") />
                <label class="form-check-label" for="AvA">AI vs AI</label>
            </div>

            <!-- Password Inputs -->
            <div id="passwordInputs" class="mt-3">
                @if (Model.SelectedGameSetting == EGamePlayers.PvP)
                {
                    <div>
                        <label for="PwX">Player X Password</label>
                        <input class="form-control" type="text" name="PasswordX" id="PwX"
                               placeholder="Enter password for Player X" value="@Model.PasswordX" />
                    </div>
                    <div class="mt-2">
                        <label for="PwO">Player O Password</label>
                        <input class="form-control" type="text" name="PasswordO" id="PwO"
                               placeholder="Enter password for Player O" value="@Model.PasswordO" />
                    </div>
                }
                else if (Model.SelectedGameSetting == EGamePlayers.PvA)
                {
                    <div>
                        <label for="Pw">Player Password</label>
                        <input class="form-control" type="text" name="Password" id="Pw"
                               placeholder="Enter password for Player" value="@Model.Password" />
                    </div>
                }
            </div>

            <br />


            <div id="startingSymbolOptions">
                <label>Play as (X starts):</label>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="SelectedPlayerSymbol" id="StartX" value="X"
                           @(Model.SelectedPlayerSymbol == EGamePiece.X ? "checked" : "") />
                    <label class="form-check-label" for="StartX">X</label>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="SelectedPlayerSymbol" id="StartO" value="O"
                           @(Model.SelectedPlayerSymbol == EGamePiece.O ? "checked" : "") />
                    <label class="form-check-label" for="StartO">O</label>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary"/>
            </div>


        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const gameSettingRadios = document.querySelectorAll('input[name="SelectedGameSetting"]');
        const passwordInputsDiv = document.getElementById("passwordInputs");
        const startingSymbolOptionsDiv = document.getElementById("startingSymbolOptions");

        function renderPasswordInputs(selectedValue) {
            passwordInputsDiv.innerHTML = ""; // Clear existing inputs

            if (selectedValue === "PvP") {
                passwordInputsDiv.innerHTML = `
                <div>
                    <label for="PwX">Player X Password</label>
                    <input class="form-control" type="text" name="PasswordX" id="PwX" placeholder="Enter password for Player X" />
                </div>
                <div class="mt-2">
                    <label for="PwO">Player O Password</label>
                    <input class="form-control" type="text" name="PasswordO" id="PwO" placeholder="Enter password for Player O" />
                </div>`;
            } else if (selectedValue === "PvA") {
                passwordInputsDiv.innerHTML = `
                <div>
                    <label for="Pw">Player Password</label>
                    <input class="form-control" type="text" name="Password" id="Pw" placeholder="Enter password for Player" />
                </div>`;
            }
        }


        function toggleStartingSymbolOptions(selectedValue) {
            if (selectedValue === "AvA") {
                startingSymbolOptionsDiv.style.display = "none";
            } else {
                startingSymbolOptionsDiv.style.display = "block";
            }
        }

        // Initial rendering
        const initialSelection = document.querySelector('input[name="SelectedGameSetting"]:checked');
        if (initialSelection) {
            renderPasswordInputs(initialSelection.value);
            toggleStartingSymbolOptions(initialSelection.value);
        }

        // Add event listeners
        gameSettingRadios.forEach(radio => {
            radio.addEventListener("change", function () {
                renderPasswordInputs(this.value);
                toggleStartingSymbolOptions(this.value);
            });
        });
    });
</script>
